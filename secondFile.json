```json
    "Java Try-Catch-Finally Block": {
    "prefix": "tryCatchFinally",
    "body": [
        "try {",
        "    ${1:// code block}",
        "} catch (${2:ExceptionType} ${3:e}) {",
        "    ${4:// exception handling}",
        "} finally {",
        "    ${5:// cleanup code}",
        "}"
    ],
    "description": "Try-catch-finally block"
},
"Java Throw Exception": {
    "prefix": "throw",
    "body": [
        "throw new ${1:ExceptionType}(${2:message});"
    ],
    "description": "Throw an exception"
},
"Java Custom Exception Class": {
    "prefix": "customException",
    "body": [
        "public class ${1:CustomExceptionName} extends ${2:Exception} {",
        "    public ${1:CustomExceptionName}(${3:String message}) {",
        "        super(message);",
        "    }",
        "}"
    ],
    "description": "Custom exception class"
},
"Java Multi-Catch Block": {
    "prefix": "multiCatch",
    "body": [
        "try {",
        "    ${1:// code block}",
        "} catch (${2:ExceptionType1} | ${3:ExceptionType2} ${4:e}) {",
        "    ${5:// exception handling}",
        "}"
    ],
    "description": "Multi-catch block"
},
"Java Iterator": {
    "prefix": "iterator",
    "body": [
        "Iterator<${1:Type}> ${2:iterator} = ${3:collection}.iterator();",
        "while (${2:iterator}.hasNext()) {",
        "    ${1:Type} ${4:element} = ${2:iterator}.next();",
        "    ${5:// code block}",
        "}"
    ],
    "description": "Iterate with Iterator"
},
"Java Stream API Filter": {
    "prefix": "streamFilter",
    "body": [
        "${1:collection}.stream()",
        "    .filter(${2:condition})",
        "    .collect(Collectors.toList());"
    ],
    "description": "Stream API for filtering"
},
"Java Stream API Map": {
    "prefix": "streamMap",
    "body": [
        "${1:collection}.stream()",
        "    .map(${2:mapper})",
        "    .collect(Collectors.toList());"
    ],
    "description": "Stream API for mapping"
},
"Get Input With Validation": {
    "prefix": "getInputWithValidation",
    "body": [
        "public static String getInputWithValidation(Scanner scanner, String prompt, Function<String, Boolean> validator) {",
        "    String input;",
        "    try {",
        "        do {",
        "            System.out.print(prompt);",
        "            input = scanner.nextLine();",
        "        } while (!validator.apply(input));",
        "    } catch (NoSuchElementException | IllegalStateException e) {",
        "        System.out.println(\"An error occurred while reading input: \" + e.getMessage());",
        "        input = \"\";",
        "    }",
        "    return input;",
        "}"
    ],
    "description": "Gets input from the user with validation using a provided validator function."
},
"Validate Numeric Input Within Range": {
    "prefix": "validateNumericInputWithinRange",
    "body": [
        "public static boolean validateNumericInputWithinRange(String input, int minValue, int maxValue) {",
        "    try {",
        "        int value = Integer.parseInt(input);",
        "        if (value < minValue || value > maxValue) {",
        "            System.out.println(\"Please enter a valid value between \" + minValue + \" and \" + maxValue + \".\");",
        "            return false;",
        "        }",
        "        return true;",
        "    } catch (NumberFormatException e) {",
        "        System.out.println(\"Invalid input. Please enter a numeric value.\");",
        "        return false;",
        "    }",
        "}"
    ],
    "description": "Validates if a given input is numeric and within a specified range."
},
"Validate NonEmpty Input": {
    "prefix": "validateNonEmptyInput",
    "body": [
        "public static boolean validateNonEmptyInput(String input) {",
        "    if (input.trim().isEmpty()) {",
        "        System.out.println(\"Invalid input. Please enter a non-empty value.\");",
        "        return false;",
        "    }",
        "    return true;",
        "}"
    ],
    "description": "Validates if a given input is not empty."
},
"Add Value To Total And Increment Count": {
    "prefix": "addValueToTotalAndIncrementCount",
    "body": [
        "public void addValueToTotalAndIncrementCount(int value) {",
        "    this.total += value;",
        "    this.count++;",
        "}"
    ],
    "description": "Adds a value to a running total and increments a count."
},
"Calculate Average": {
    "prefix": "calculateAverage",
    "body": [
        "public double calculateAverage() {",
        "    if (count == 0) {",
        "        return 0;",
        "    }",
        "    return (double) total / count;",
        "}"
    ],
    "description": "Calculates the average of accumulated values."
},
"Determine Grade From Average": {
    "prefix": "determineGradeFromAverage",
    "body": [
        "public char determineGradeFromAverage() {",
        "    double average = calculateAverage();",
        "    if (average >= 90)",
        "        return 'A';",
        "    if (average >= 80)",
        "        return 'B';",
        "    if (average >= 70)",
        "        return 'C';",
        "    if (average >= 60)",
        "        return 'D';",
        "    return 'F';",
        "}"
    ],
    "description": "Determines a letter grade based on a calculated average."
},
"Display Results": {
    "prefix": "displayResults",
    "body": [
        "public void displayResults() {",
        "    double average = calculateAverage();",
        "    char grade = determineGradeFromAverage();",
        "    System.out.println(\"Name: \" + getName());",
        "    System.out.printf(\"Average: %.2f%n\", average);",
        "    System.out.println(\"Grade: \" + grade);",
        "}"
    ],
    "description": "Displays results, including name, average, and grade."
},
"Get Values From User Until Stop Word": {
    "prefix": "getValuesFromUserUntilStopWord",
    "body": [
        "public void getValuesFromUserUntilStopWord(Scanner scanner, String stopWord, int minValue, int maxValue) {",
        "    while (true) {",
        "        System.out.print(\"Enter value (or type '\" + stopWord + \"' to finish): \");",
        "        String input = scanner.nextLine();",
        "        if (input.equalsIgnoreCase(stopWord)) {",
        "            break;",
        "        }",
        "        if (validateNumericInputWithinRange(input, minValue, maxValue)) {",
        "            addValueToTotalAndIncrementCount(Integer.parseInt(input));",
        "        }",
        "    }",
        "}"
    ],
    "description": "Gets numeric values from the user until a stop word is entered."
},
"JavaDoc Basic Example": {
    "prefix": "javadocBasic",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Try-With-Resources": {
    "prefix": "tryWithResources",
    "body": [
        "try (${1:ResourceType} ${2:resource} = new ${1:ResourceType}(${3:parameters})) {",
        "    ${4:// code block}",
        "} catch (${5:ExceptionType} ${6:e}) {",
        "    ${7:// exception handling}",
        "}"
    ],
    "description": "Demonstrates the use of try-with-resources for automatic resource management."
},
"Optional Usage": {
    "prefix": "optionalUsage",
    "body": [
        "Optional<String> optionalString = Optional.ofNullable(${1:value});",
        "",
        "if (optionalString.isPresent()) {",
        "    String value = optionalString.get();",
        "    // Use the value",
        "} else {",
        "    // Handle the case where the value is absent",
        "}",
        "",
        "String defaultValue = optionalString.orElse(${2:default});",
        "",
        "String valueIfPresent = optionalString.orElseThrow(${3:exceptionSupplier});"
    ],
    "description": "Best practices for using `Optional` to handle null values effectively."
},
"Override-Equivalent Methods": {
    "prefix": "overrideEquivalent",
    "body": [
        "public class ${1:BaseClass} {",
        "    public void ${2:baseMethod}() {",
        "        // Base implementation",
        "    }",
        "}",
        "",
        "public class ${3:DerivedClass} extends ${1:BaseClass} {",
        "    @Override",
        "    public void ${2:baseMethod}() {",
        "        // Derived implementation",
        "    }",
        "}",
        "",
        "public class ${4:AnotherDerivedClass} extends ${1:BaseClass} {",
        "    public void ${2:baseMethod}(${5:Type} ${6:param}) {",
        "        // Overloaded implementation",
        "    }",
        "}"
    ],
    "description": "Example of inheritance with override-equivalent methods."
},
"Enum with Methods": {
    "prefix": "enumWithMethods",
    "body": [
        "public enum ${1:EnumName} {",
        "    ${2:CONSTANT1},",
        "    ${3:CONSTANT2},",
        "    ${4:CONSTANT3};",
        "",
        "    public void ${5:methodName}() {",
        "        // Method implementation",
        "    }",
        "",
        "    public static void main(String[] args) {",
        "        for (${1:EnumName} value : ${1:EnumName}.values()) {",
        "            value.${5:methodName}();",
        "        }",
        "    }",
        "}"
    ],
    "description": "Enum that includes methods and demonstrates iterating over constants."
},
"Synchronized Method": {
    "prefix": "synchronizedMethod",
    "body": [
        "public synchronized ${1:void} ${2:methodName}(${3:parameters}) {",
        "    ${4:// method body}",
        "}"
    ],
    "description": "Use of synchronized keyword to control access to a method."
},
"Static Block Initialization": {
    "prefix": "staticBlock",
    "body": [
        "public class ${1:ClassName} {",
        "    static {",
        "        ${2:// Initialization code}",
        "    }",
        "}"
    ],
    "description": "Demonstrates the use of static blocks for initializing static variables."
},
"LinkedHashMap with Access Order": {
    "prefix": "linkedHashMapAccessOrder",
    "body": [
        "Map<${1:KeyType}, ${2:ValueType}> ${3:mapName} = new LinkedHashMap<>();",
        "${3:mapName}.put(${4:key1}, ${5:value1});",
        "${3:mapName}.put(${6:key2}, ${7:value2});",
        "${3:mapName}.put(${8:key3}, ${9:value3});",
        "System.out.println(${3:mapName}); // Output: {key1=value1, key2=value2, key3=value3}"
    ],
    "description": "Demonstrates the creation of a `LinkedHashMap` that maintains access order."
},
"ArrayList Reversed View": {
    "prefix": "arrayListReversed",
    "body": [
        "List<${1:Type}> ${2:listName} = new ArrayList<>(Arrays.asList(${3:elements}));",
        "Collections.reverse(${2:listName});",
        "System.out.println(${2:listName}); // Output: Reversed list"
    ],
    "description": "Demonstrates creating a reversed view of an `ArrayList`."
},
"Unmodifiable Collections": {
    "prefix": "unmodifiableCollections",
    "body": [
        "List<String> originalList = new ArrayList<>(Arrays.asList(\"a\", \"b\", \"c\"));",
        "List<String> unmodifiableList = Collections.unmodifiableList(originalList);",
        "",
        "Set<String> originalSet = new HashSet<>(Arrays.asList(\"x\", \"y\", \"z\"));",
        "Set<String> unmodifiableSet = Collections.unmodifiableSet(originalSet);",
        "",
        "Map<String, Integer> originalMap = new HashMap<>();",
        "originalMap.put(\"key1\", 1);",
        "originalMap.put(\"key2\", 2);",
        "Map<String, Integer> unmodifiableMap = Collections.unmodifiableMap(originalMap);"
    ],
    "description": "Creating unmodifiable views of various collections."
},
"Stream API Enhancements": {
    "prefix": "streamApiEnhancements",
    "body": [
        "List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);",
        "",
        "// Filtering",
        "List<Integer> evenNumbers = numbers.stream()",
        "    .filter(n -> n % 2 == 0)",
        "    .collect(Collectors.toList());",
        "",
        "// Mapping",
        "List<String> numberStrings = numbers.stream()",
        "    .map(String::valueOf)",
        "    .collect(Collectors.toList());",
        "",
        "// Reducing",
        "int sum = numbers.stream()",
        "    .reduce(0, Integer::sum);"
    ],
    "description": "Demonstrates advanced usage of the Stream API for collections."
},
"JavaDoc Compliance": {
    "prefix": "javadocCompliance",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Language Specification Compliance": {
    "prefix": "javaLanguageSpecificationCompliance",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java JVM Specification Compliance": {
    "prefix": "javaJVMSpecificationCompliance",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Sequenced Collections Usage": {
    "prefix": "javaSequencedCollectionsUsage",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Collections Framework Enhancements": {
    "prefix": "javaCollectionsFrameworkEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Stream API Enhancements": {
    "prefix": "javaStreamApiEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Stream API Enhancements": {
    "prefix": "javaStreamApiEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Stream API Enhancements": {
    "prefix": "javaStreamApiEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Stream API Enhancements": {
    "prefix": "javaStreamApiEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Stream API Enhancements": {
    "prefix": "javaStreamApiEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Stream API Enhancements": {
    "prefix": "javaStreamApiEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Stream API Enhancements": {
    "prefix": "javaStreamApiEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
        " * This is an enum type with constants representing different states.",
        " */",
        "public enum ${1:EnumName} {",
        "    /**",
        "     * Constant representing the first state.",
        "     */",
        "    ${2:CONSTANT1},",
        "    /**",
        "     * Constant representing the second state.",
        "     */",
        "    ${3:CONSTANT2},",
        "    /**",
        "     * Constant representing the third state.",
        "     */",
        "    ${4:CONSTANT3};",
        "}"
    ],
    "description": "JavaDoc for an enum type with details on each constant."
},
"Java Stream API Enhancements": {
    "prefix": "javaStreamApiEnhancements",
    "body": [
        "/**",
        " * This is a basic Java class with a main method.",
        " */",
        "public class ${1:ClassName} {",
        "    /**",
        "     * Main method of the class.",
        "     *",
        "     * @param args Command line arguments.",
        "     */",
        "    public static void main(String[] args) {",
        "        $0 //main method body",
        "    }",
        "}"
    ],
    "description": "Basic JavaDoc for a class and its methods."
},
"JavaDoc for Enum": {
    "prefix": "javadocEnum",
    "body": [
        "/**",
            " * This is an enum type with constants